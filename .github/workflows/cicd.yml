name: CI and Publish to PyPI

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to PyPI if tests pass?'
        required: true
        default: 'false'
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Unit Tests
    concurrency:
      group: test-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Run unit tests
        run: |
          make integrated-test

  pypi-publish:
    needs: test
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish == 'true')
    runs-on: ubuntu-latest
    name: Publish to PyPI
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel

      - name: Build package
        run: |
          make build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/* --skip-existing

  git-release:
    needs: test
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish == 'true')
    runs-on: ubuntu-latest
    name: Git Release
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel

      - name: Build package
        run: |
          make build

      - name: Get Release Info
        id: release_info
        run: |
          echo "name=$(python src/dump_hls/release.py release_name)" >> $GITHUB_OUTPUT
          python src/dump_hls/release.py release_body > body.md

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          bodyFile: "body.md"
          name: ${{ steps.release_info.outputs.name }}
          tag: ${{ steps.release_info.outputs.name }}
          token: ${{ secrets.GH_PAT }}